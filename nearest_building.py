# -*- coding: utf-8 -*-
"""
/***************************************************************************
 NearestBuildingsToPoint
                                 A QGIS plugin
 This plug in plots buildings that are closest to a point within a given radius
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2018-09-11
        git sha              : $Format:%H$
        copyright            : (C) 2018 by PSMA
        email                : Beta@psma.com.au
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5.QtCore import * # QSettings, QTranslator, qVersion, QCoreApplication
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QAction
from PyQt5.QtWidgets import QMessageBox

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .nearest_building_dialog import NearestBuildingsToPointDialog
import os.path
from pathlib import Path

#psma - - -
import requests
import json
import re

#ref: https://gis.stackexchange.com/questions/253733/how-to-get-co-ordinates-of-points-on-mouse-click-in-pyqgis
from qgis.gui import QgsMapToolEmitPoint

#https://gis.stackexchange.com/questions/255803/how-do-i-fix-name-iface-is-not-defined
from qgis.utils import iface

from .ClickManagement import *    #to manage canvas

from .ProjectGDA import *

def resolve_file_path(name, basepath=None):
    # Handler for resolving to the plugin directory
    # Pinched from https://gis.stackexchange.com/a/130031
    if not basepath:
      basepath = os.path.dirname(os.path.realpath(__file__))
    return os.path.join(basepath, name)

def load_api_key_config():
    # Load the API Key from file, if doesn't exist return an empty string
    creds_file = Path(resolve_file_path("credentials.json"))
    if creds_file.is_file():
        with open(creds_file) as f:
            data = json.load(f)
            return data["api_key"]
    return ''

class NearestBuildingsToPoint:

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'NearestBuildingsToPoint_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)

        # Create the dialog (after translation) and keep reference
        self.dlg = NearestBuildingsToPointDialog()

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Nearest Building')
        # TODO: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.addToolBar(u'NearestBuildingsToPoint')
        self.toolbar.setObjectName(u'NearestBuildingsToPoint')

        # Load the API Key from the config file and set it within the form
        self.api_key = load_api_key_config()
        self.dlg.input_apikey.setText(self.api_key)
        # Setup the click handler to save the updated API key
        self.dlg.btn_api_set.clicked.connect(self.set_api_key)

    # noinspection PyMethodMayBeStatic
    def tr(self, message):

        self.dlg.btn_buildings_by_latlon.clicked.connect(self.buildingpoint_keyboard)
        self.dlg.btn_get_buildings_by_map.clicked.connect(self.buildingpoint_click)

        # store layer id
        self.layerid = ''
        self.layer = None

        return QCoreApplication.translate('NearestBuildingsToPoint', message)

    def set_api_key(self):
        new_key = self.dlg.input_apikey.text()
        creds_file = Path(resolve_file_path("credentials.json"))
        with open(creds_file, 'w') as f:
            json.dump({'api_key': new_key}, f)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        icon_path = ':/plugins/nearest_building/geoscape_ico.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Nearest Buildings'),
            callback=self.run,
            parent=self.iface.mainWindow())

    def unload(self):
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Nearest Building'),
                action)
            self.iface.removeToolBarIcon(action)
        del self.toolbar

    def run(self):
        self.dlg.show()
        result = self.dlg.exec_()
        if result:
            pass

    def buildingpoint_click(self):
        print("in neareast_buildin.py in NearestBuildingsToPoint Class in def buildingpoint_click")
        ct = GetClick(self.iface, self.nearest_building);
        self.previous_map_tool = self.iface.mapCanvas().mapTool()
        self.iface.mapCanvas().setMapTool(ct)

    def buildingpoint_keyboard(self):  
        var_lat = self.dlg.lineEdit.text()
        var_long = self.dlg.lineEdit_2.text()
        self.get_building_ids(var_lat, var_long, self.dlg.input_radius.text())

    def nearest_building(self, point):
        pt = pointGDA94(point, self.iface.mapCanvas().mapSettings().destinationCrs()) 
        long_ord = (pt[0])
        lat_ord = (pt[1])      
        self.get_building_ids(lat_ord, long_ord, self.dlg.input_radius.text())

    def get_building_ids(self, latx, longy, radiusdist):

        bl_url = 'https://api.psma.com.au/beta/v1/buildings/?latLong=' + str(latx) + '%2C' + str(
            longy) + '&radius=' + str(radiusdist) + '&page=1&perPage=100&include=footprint2d'
        
        print('Getting buidings: ' + bl_url)
        
        headers = {
            "Authorization": self.api_key,
            "Accept": "application/json"
        }

        response = requests.get(bl_url, headers=headers, verify=False)
        response_data = response.json()

        fc = {
            "type": 'FeatureCollection',
            "features": []
        }

        if (response_data['message']):
            QMessageBox.about(None, "Error retrieving data", "Error retrieving data " +\
            str(response_data['message'])) 
            return None

        if len(response_data['data']) > 0:
            for item in response_data['data']:
                building_id = item['buildingId']
                print(item)
                fc["features"].append({
                    "geometry": item['footprint2d'],
                    "properties": {
                        "BuildingId": building_id
                    }
                })

            vlayer = QgsVectorLayer(json.dumps(fc), "Geoscape", "ogr")
            QgsProject.instance().addMapLayer(vlayer)

