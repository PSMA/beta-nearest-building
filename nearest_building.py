# -*- coding: utf-8 -*-
"""
/***************************************************************************
 NearestBuildingsToPoint
                                 A QGIS plugin
 This plug in plots buildings that are closest to a point within a given radius
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2018-09-11
        git sha              : $Format:%H$
        copyright            : (C) 2018 by PSMA
        email                : Beta@psma.com.au
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5.QtCore import * # QSettings, QTranslator, qVersion, QCoreApplication
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QAction

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .nearest_building_dialog import NearestBuildingsToPointDialog
import os.path

#psma - - -
import requests
import json
import re

#ref: https://gis.stackexchange.com/questions/253733/how-to-get-co-ordinates-of-points-on-mouse-click-in-pyqgis
from qgis.gui import QgsMapToolEmitPoint

#https://gis.stackexchange.com/questions/255803/how-do-i-fix-name-iface-is-not-defined
from qgis.utils import iface

from .ClickManagement import *    #to manage canvas

from .ProjectGDA import *


from .credentials import * # file needs to contain API key.

# - - -

apikey = API_KEY 
print(API_KEY)

class NearestBuildingsToPoint:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'NearestBuildingsToPoint_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)

        # Create the dialog (after translation) and keep reference
        self.dlg = NearestBuildingsToPointDialog()

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Nearest Building')
        # TODO: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.addToolBar(u'NearestBuildingsToPoint')
        self.toolbar.setObjectName(u'NearestBuildingsToPoint')

    # noinspection PyMethodMayBeStatic
    def tr(self, message):

        #12th sept 2018. get input from user---------------------------------------

        self.dlg.pushButton_2.clicked.connect(self.buildingpoint_click) #from map canvas
        self.dlg.pushButton.clicked.connect(self.buildingpoint_keyboard) #from keyboard lat long                         



        # store layer id
        self.layerid = ''
        self.layer = None


        #------------------------end.

        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('NearestBuildingsToPoint', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/nearest_building/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Nearest Buildings'),
            callback=self.run,
            parent=self.iface.mainWindow())


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Nearest Building'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar


    def run(self):
        """Run method that performs all the real work"""
        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass

    def buildingpoint_click(self):  #goes to GetClick and goes to nearest_building def.
        print("in neareast_buildin.py in NearestBuildingsToPoint Class in def buildingpoint_click")
        ct = GetClick(self.iface,  self.nearest_building); #nearest_building 
        self.previous_map_tool = self.iface.mapCanvas().mapTool()
        self.iface.mapCanvas().setMapTool(ct)

    def buildingpoint_keyboard(self):  #goes directly to def get_building_ids
        #manual lat long input from keyboard. 
        var_lat = self.dlg.lineEdit.text()
        var_long = self.dlg.lineEdit_2.text()
        var_search_radius = self.dlg.lineEdit_3.text()
        self.get_building_ids( var_lat , var_long, var_search_radius)



    #above there is limited changes to the origional defualt builder.      

    def nearest_building(self, point): #turns point to lat and log, to pass to get_building_ids + manages projections
        #this gets the point and distance form the click event. 
        #print(" in nearest_building")
        #print(point)
        #print(point[0])
        #print(point[1])

       
        #REWORK.... 21092018 GDA transform
        pt = pointGDA94(point, self.iface.mapCanvas().mapSettings().destinationCrs()) 
        print(pt) 
        long_ord = (pt[0])
        lat_ord = (pt[1])      




        var_search_radius = self.dlg.lineEdit_3.text()
        print(var_search_radius)

        self.get_building_ids( lat_ord, long_ord, var_search_radius)




    def get_building_ids(self, latx, longy, radiusdist): #main communciation with APS
        print("in get_building_ids")

        bl_url = 'https://api.psma.com.au/beta/v1/buildings/nearest/?latLong=' + str(latx) + '%2C' + str(longy) + '&radius=' + str(radiusdist) + '&page=1&perPage=100'
        
        print(bl_url)
        
        headers = {
            "Authorization": apikey,
            "Accept": "application/json"

        }
        response2 = requests.get(bl_url, headers=headers, verify=False) # get list of closest building ids
        print ("response code for the set of building is: ")
        print (response2)
        data2 = response2.json()
        #print(data2)
        data3 = json.dumps(data2)
        #print("data3")
        #print(data3)

        

        for item in data2['data']: # get details for each building and plot them.
            print(item)
            building_id = item['buildingId']
            print (building_id)

            # ---------------------------------------------------
            bl_urlBuildingLinks = 'https://api.psma.com.au/beta/v1/buildings/' + building_id + '/' + '?include=footprint2d' #more attributes can be added after include
            
            print (bl_urlBuildingLinks)
            response3 = requests.get(bl_urlBuildingLinks, headers=headers, verify=False) # for each building get 2d footprint for plotting.
            print("response code for individual building call is: ")
            print(response3)
            data4 = response3.json()
            data5 = json.dumps(data4)
            #print("data5")
            #print(data5)


            #adds each json retuned as layer for this plug in. 
            vlayer = QgsVectorLayer(data5, "buildingId" + "_" + building_id, "ogr")
            print(vlayer)###
            QgsProject.instance().addMapLayer(vlayer)

